import fullwaveqc.visual as visual
import fullwaveqc.tools as tools
import numpy as np
import os

def test_thisfunction():
    assert (True)


def test_vpwell():
    # Load predicted model and true model for well profile testing
    dir_path = os.path.abspath(os.path.dirname(__file__))
    model_path = os.path.join(dir_path, "test_data/PARBASE25_7-CP00130-Vp.sgy")
    model = tools.load(model_path, model=True, verbose=0)
    true_path = os.path.join(dir_path, "test_data/TRUE_enl_Vp_bl_y6250.sgy")
    true_model = tools.load(true_path, model=True, verbose=0)
    true_model.dx = 2.  # fix parameters that load couldn't read from model NOT generated by Fullwave

    # Obtain wells and rmse values
    wells, true_wells, rmses = visual.vpwell(model, pos_x=[1000, 10000, 14000], TrueModel=true_model, plot=False)

    # assert (wells[0] == [1500.    , 1500.    , 1500.    , 1500.    , 1500.    , 1500.    ,
    #    1500.    , 1500.    , 1500.    , 1500.    , 1500.    , 1508.1843,
    #    1694.2288, 1816.9785, 1867.5574, 1891.3793, 1868.0787, 1806.2312,
    #    1728.4816, 1669.97  , 1631.281 , 1616.0876, 1618.7086, 1636.4045,
    #    1666.6592, 1701.6107, 1732.5603, 1752.1664, 1763.5474, 1774.0704,
    #    1784.2571, 1794.9846, 1807.7588, 1820.399 , 1834.2152, 1854.6766,
    #    1880.1487, 1911.4578, 1948.1467, 1980.8767, 2009.1863, 2033.6982,
    #    2053.954 , 2071.793 , 2087.0752, 2102.3164, 2117.5378, 2134.4102,
    #    2152.924 , 2170.3037, 2185.958 , 2196.0706, 2201.1826, 2203.2957,
    #    2203.664 , 2204.7715, 2207.8738, 2211.8425, 2216.8184, 2220.653 ,
    #    2223.5022, 2225.0176, 2225.3455, 2225.9446, 2227.4146, 2231.0422,
    #    2236.3813, 2242.683 , 2248.608 , 2254.1682, 2258.4172, 2260.593 ,
    #    2260.6606, 2257.1084, 2250.8955, 2243.675 , 2236.6694, 2233.0513,
    #    2233.8125, 2239.1863, 2247.0176, 2250.4414, 2247.7083, 2239.7385,
    #    2229.9001, 2226.241 , 2228.3462, 2230.9502, 2233.0742, 2231.1323,
    #    2225.7896, 2219.3333, 2213.4268, 2213.315 , 2219.2505, 2230.9927,
    #    2245.9866, 2258.1003, 2266.2825, 2270.2976, 2272.2244, 2275.1792,
    #    2279.4377, 2282.9524, 2284.732 , 2286.2588, 2288.9304, 2295.5627,
    #    2305.5625, 2316.5767, 2327.42  , 2336.459 , 2344.2004, 2351.0215,
    #    2357.395 , 2363.859 , 2370.2717, 2377.1172, 2384.7793, 2394.2021,
    #    2404.962 , 2415.4124, 2424.4507, 2432.1118, 2440.0042, 2452.8728,
    #    2468.2551, 2481.1726, 2489.2341, 2492.7651, 2493.7063, 2498.2368,
    #    2507.5188, 2519.916 , 2534.3438, 2548.373 , 2561.6152, 2572.4226,
    #    2579.8618, 2583.0994, 2583.0098, 2581.983 , 2581.209 , 2582.0366,
    #    2584.435 , 2589.7915, 2598.0024, 2608.3594, 2619.9468, 2628.9468,
    #    2635.0908, 2638.2893, 2639.5012, 2642.081 , 2646.2437, 2652.264 ,
    #    2659.5676, 2668.952 , 2681.6372, 2700.3447, 2725.2405, 2752.839 ,
    #    2780.2827, 2805.9595, 2830.7996, 2856.3958, 2883.339 , 2912.57  ,
    #    2943.8604, 2975.4165, 3006.058 , 3032.8916, 3055.3745, 3073.849 ,
    #    3088.8677, 3102.4119, 3115.2354, 3128.2986, 3141.3213, 3151.793 ,
    #    3158.6602, 3161.1565, 3159.9302, 3157.6826, 3154.89  , 3153.1753,
    #    3152.4365, 3152.0508, 3151.9421, 3152.372 , 3153.446 , 3155.3196,
    #    3157.968 , 3161.3074, 3165.284 , 3169.744 , 3174.649 , 3179.8308,
    #    3185.2363, 3191.1829, 3196.8418])

    return None
